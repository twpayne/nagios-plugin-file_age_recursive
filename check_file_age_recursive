#!/usr/bin/env python
#
#   check_file_age_recursive  Nagios plugin to check the age of the most
#   recently modified file anywhere in a directory
#   Copyright (C) 2010  Tom Payne
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.


from optparse import OptionParser, OptionValueError
import os
import os.path
import re
import stat
import sys
import time


OK, WARNING, CRITICAL, UNKNOWN = xrange(0, 4)
status_message = 'OK WARNING CRITICAL UNKNOWN'.split()

MULTIPLIERS = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400, 'w': 604800}
DIVISORS = ((60, 'minutes'), (60, 'hours'), (24, 'days'), (7, 'weeks'))


def parse_period(option, opt_str, value, parser):
    m = re.match(r'(\d+(?:\.\d+)?)(%s)\Z' % '|'.join(MULTIPLIERS.keys()), value)
    if not m:
        raise OptionValueError('invalid period - %s' % value)
    setattr(parser.values, option.dest, float(m.group(1)) * MULTIPLIERS[m.group(2)])


def main(argv):
    parser = OptionParser()
    parser.add_option('-d', metavar='DIRECTORY', dest='dir', type=str)
    parser.add_option('-w', metavar='PERIOD', dest='warning', type=str, action='callback', callback=parse_period)
    parser.add_option('-c', metavar='PERIOD', dest='critical', type=str, action='callback', callback=parse_period)
    options, args = parser.parse_args(argv[1:])
    max_mtime, max_filepath = 0, None
    for dirpath, dirnames, filenames in os.walk(options.dir):
        for filename in filenames:
            filepath = os.path.join(dirpath, filename)
            stat = os.lstat(filepath)
            if stat.st_mtime > max_mtime:
                max_mtime = stat.st_mtime
                max_filepath = filepath
    exit_status = OK
    age = time.time() - max_mtime
    if options.warning and age > options.warning:
        exit_status = max(exit_status, WARNING)
    if options.critical and age > options.critical:
        exit_status = max(exit_status, CRITICAL)
    units = 'seconds'
    for d, u in DIVISORS:
        if age < d:
            break
        else:
            age /= d
            units = u
    print 'FILE_AGE %s: %.1f %s (%s)' % (status_message[exit_status], age, units, max_filepath)
    sys.exit(exit_status)


if __name__ == '__main__':
    main(sys.argv)
